/*
9. Palindrome Number
Easy
8.8K
2.4K
Companies
Given an integer x, return true if x is a 
palindrome
, and false otherwise.

 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1
 

Follow up: Could you solve it without converting the integer to a string?
*/


class Solution {
    public boolean isPalindrome(int x) {
        // if (x < 0) return false;
        // final int originalInt = x;
        // int reverseInt = 0;

        // while (x > 0) {
        //     reverseInt = (x % 10) + (reverseInt * 10);
        //     x = x / 10;
        // }
        // return reverseInt == originalInt;

        // - convert number input to array
        // - declare left pointer
        // - declare right pointer
        // - while the left pointer is less than right pointer
        //     - check to see if element at left pointer is the same as element at right pointer
        //     - IF NOT => return false;
            
        //     - increment left pointer
        //     - decrement right pointer
        // - return true after breaking out of while loop

        if (x < 0) return false;
        String s = Integer.toString(x);
    
        int left = 0;
        int right = s.length() - 1;
    
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
}
