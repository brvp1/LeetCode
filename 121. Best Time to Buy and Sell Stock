/*
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104
*/

JS Solution

/**
    Input: An array of ints which are the prices of stock on a given day
    Output: An int that is the max profit possible from the input
    (Profit: if the price goes up after we buy the stock)

    Algorithm:
    - Declare a variable "profit" and set to zero.
    - Delare a variable "buy" and set it to 0
    - Delare a variable "sell" and set it to 1
    
    - while sell is less than the number of stocks in the array
      - check if current sell element is less than buy element
        - if yes => reassing index of buy to sell
      
    - declare a variable called "newProfit" and set it to current sell - current buy
    - if newProfit > profit
      - reassign profit to newProfit

    - increment sell by 1

  - return profit

  */
var maxProfit = function(prices) {
    let profit = 0;
    let buy = 0;
    let sell = 1;

    while (sell < prices.length) {
      if (prices[sell] < prices[buy]) {
        buy = sell;
      }

      let newProfit = prices[sell] - prices[buy];

      if (newProfit > profit) {
        profit = newProfit;
      }
      sell++;
    }

    return profit;
};
