
/*
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:

Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
Example 2:

Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
Example 3:

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 

Constraints:

n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.
 

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

*/

/*
input : an array of numbers from [0, n]
output: a number in the range that is missing

Algorithm:
  - Declare a variable names indexSum and set it to 0 (Sum of all the indices because the array is 0  to n)
  - Declare another variable named elementSum and set it to 0 (This is the sum of the current element in the array)
  
  - Iterate through the array with indices and stop at i + 1
    - add current index to indexSum
    - add value of current element to elementSum or 0 if the index is out of range
    
  - return indexSum - elementSum
(To find the missing number take sum of the indices ans subtract it from the sum of all the elements in the array
// This works only if the array is 0 to N and all values are unique
*/

JAVASCRIPT SOLUTION:

var missingNumber = function(nums) {
    let indexSum = 0; 
    let elementSum = 0;

    for (let i = 0; i < nums.length + 1; i++) {
        indexSum += i;
        elementSum += nums[i] || 0;
    }

    return indexSum - elementSum;
};

// JAVA SOLUTION
class Solution {
    public int missingNumber(int[] nums) {
      int sum = 0;
    for (int i = 0; i < nums.length; i++)
        sum += nums[i] - i;
    return nums.length - sum;
    }
}   
