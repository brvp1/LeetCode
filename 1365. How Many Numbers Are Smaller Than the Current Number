/*
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
Example 2:

Input: nums = [6,5,4,8]
Output: [2,1,0,3]
Example 3:

Input: nums = [7,7,7,7]
Output: [0,0,0,0]
 

Constraints:

2 <= nums.length <= 500
0 <= nums[i] <= 100
*/

JAVA Solution:
 int[] bucket = new int[102];
        for(int i=0; i<nums.length; i++)
            bucket[nums[i]+1]++;

        for(int i=1; i<102; i++) 
            bucket[i] += bucket[i-1];
        
        for(int i=0; i<nums.length; i++)
            nums[i] = bucket[nums[i]];
        
        return nums;

JavaScript Solution:

/*
 Pseudocode:
    input: an array of ints
    output: an array with numbers that represent how many elements are smaller than it

    Algorithm:
    - Create hash
        - sort input (copy)
        iterate through sorted array
            - append element and index
        
 */
var smallerNumbersThanCurrent = function(nums) {
    const hash = new Map();
    let sortedArray = nums.slice().sort((a,b) => a-b);
    sortedArray.forEach((el, idx) => hash.has(el)? null : hash.set(el, idx));

    return nums.map((el) => hash.get(el));
};
